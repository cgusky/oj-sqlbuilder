{"ts":1368653734211,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1368653826665,"patch":[[{"diffs":[[1,"/* jshint undef: true, unused: true */\r\n/* global Csw2:true, window:true, Ext:true, $: true */\r\n\r\n(function _panelIIFE() {\r\n\r\n    /**\r\n     * Private class representing the construnction of a panel. It returns a Csw2.panel.panel instance with collections for adding columns and listeners.\r\n     * @param name {String} The ClassName of the panel to associate with ExtJS\r\n     * @param requires {Array} An array of ExtJS dependencies\r\n     * @param extend {String} [extend='Ext.panel.Panel'] An ExtJs class name to extend, usually the panel panel\r\n     * @param alias {Array} [alias] An array of aliases to reference the panel\r\n     * @param id {String} An id to uniquely identify the panel\r\n     * @param store {Csw2.panels.stores.store} A store to provide data to the panel\r\n     * @param plugins {Array} An array of plugins to load with the panel\r\n    */\r\n    var Panel = function(name, requires, extend, alias, id, store, plugins) {\r\n        var that = window.Csw2.classDefinition({\r\n            name: name,\r\n            requires: requires,\r\n            extend: extend || 'Ext.panel.Panel',\r\n            alias: alias,\r\n            id: id,\r\n            store: store,\r\n            plugins: plugins,\r\n            namespace: 'panels'\r\n        });\r\n\r\n        return that;\r\n    };\r\n\r\n    Csw2.instanceof.lift('Panel', Panel);\r\n\r\n    /**\r\n     * Create a panel object.\r\n     * @returns {Csw.panels.panel} A panel object. Exposese listeners and columns collections. Call init when ready to construct the panel. \r\n    */\r\n    Csw2.panels.lift('panel', function(panelDef) {\r\n        if(!(panelDef)) {\r\n            throw new Error('Cannot instance a panel without properties');\r\n        }\r\n        if (!(panelDef.name)) {\r\n            throw new Error('Cannot instance a panel without a classname');\r\n        }\r\n        var panel = new Panel(panelDef.name, panelDef.requires, panelDef.extend, panelDef.alias, panelDef.id, panelDef.store, panelDef.plugins);\r\n        return panel;\r\n    });\r\n\r\n\r\n}());"]],"start1":0,"start2":0,"length1":0,"length2":1989}]],"length":1989,"saved":false}
{"ts":1368653832421,"patch":[[{"diffs":[[0," global "],[-1,"Csw2"],[1,"OJ"],[0,":true, w"]],"start1":42,"start2":42,"length1":20,"length2":18},{"diffs":[[0,"turns a "],[-1,"Csw2"],[1,"OJ"],[0,".panel.p"]],"start1":202,"start2":202,"length1":20,"length2":18},{"diffs":[[0," store {"],[-1,"Csw2"],[1,"OJ"],[0,".panels."]],"start1":699,"start2":699,"length1":20,"length2":18},{"diffs":[[0," window."],[-1,"Csw2"],[1,"OJ"],[0,".classDe"]],"start1":948,"start2":948,"length1":20,"length2":18},{"diffs":[[0,"\r\n\r\n    "],[-1,"Csw2"],[1,"OJ"],[0,".instanc"]],"start1":1268,"start2":1268,"length1":20,"length2":18},{"diffs":[[0,"    "],[-1,"Csw2"],[1,"OJ"],[0,".pan"]],"start1":1505,"start2":1505,"length1":12,"length2":10}]],"length":1977,"saved":false}
{"ts":1368653833924,"patch":[[{"diffs":[[0,"e panel."],[-1," "],[0,"\r\n    */"]],"start1":1486,"start2":1486,"length1":17,"length2":16}]],"length":1976,"saved":false}
