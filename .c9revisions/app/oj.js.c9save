{"ts":1367967875947,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1367967960438,"patch":[[{"diffs":[[1,"/*global OJ:true, jQuery: true, window: true */\n(function (domVendor) {\n\n    /**\n     *    The OJ  NameSpace, an IIFE\n     *    @namespace\n     *    @export\n     *    @return {window.OJ}\n     */\n    Object.defineProperty(window, 'OJ', {\n        value: (function OJ() {\n            ///<summary>(IIFE) Intializes the OJ namespace.</summary>\n            ///<returns type=\"window.OJ\">The OJ namespace.</returns>\n\n            var OjInternal = {\n                dependents: []\n            };\n\n            Object.defineProperty(OjInternal, 'getOjMembers', {\n                value: function () {\n                    var members = [];\n\n                    function recurseTree(key, lastKey) {\n                        if (typeof (key) === 'string') {\n                            members.push(lastKey + '.' + key);\n                        }\n                        if (domVendor.isPlainObject(key)) {\n                            Object.keys(key).forEach(function (k) {\n                                if (typeof (k) === 'string') {\n                                    members.push(lastKey + '.' + k);\n                                }\n                                if (domVendor.isPlainObject(key[k])) {\n                                    recurseTree(key[k], lastKey + '.' + k);\n                                }\n                            });\n                        }\n                    }\n                    Object.keys(OjTree['OJ']).forEach(function (key) {\n                        if (domVendor.isPlainObject(OjTree['OJ'][key])) {\n                            recurseTree(OjTree['OJ'][key], 'OJ');\n                        }\n                    });\n                    return members;\n                }\n            });\n\n            Object.defineProperty(OjInternal, 'alertDependents', {\n                value: function (imports) {\n                    var deps = OjInternal.dependents.filter(function (depOn) {\n                        return false === depOn(imports);\n                    });\n                    if (Array.isArray(deps)) {\n                        OjInternal.dependents = deps;\n                    }\n                }\n            });\n\n            var OjTree = Object.create(null);\n            OjTree['OJ'] = Object.create(null);\n\n            var prototype = Object.create(null);\n\n            /**\n             *    Internal OJ method to create new \"sub\" namespaces on arbitrary child objects.\n             *\t@param (Object) proto An instance of an Object to use as the basis of the new namespace prototype\n             */\n            var makeNameSpace = function (proto, tree, spacename) {\n                /// <summary>Internal OJ method to create new \"sub\" namespaces on arbitrary child objects.</summary>\n                /// <param name=\"proto\" type=\"Object\"> String to parse </param>\n                /// <returns type=\"Object\">The new child namespace.</returns>\n                proto = proto || Object.create(null);\n\n                var ret = Object.create(proto);\n\n                /**\n                 *\t\"Lift\" an Object into the prototype of the namespace.\n                 *\tThis Object will be readable/executable but is otherwise immutable.\n                 *   @param (String) name The name of the object to lift\n                 *   @param (Object) obj Any, arbitrary Object to use as the value.\n                 *   @return (Object) The value of the new property.\n                 */\n                Object.defineProperty(proto, 'lift', {\n                    value: function (name, obj) {\n                        'use strict';\n                        /// <summary>\"Lift\" an Object into the prototype of the namespace. This Object will be readable/executable but is otherwise immutable.</summary>\n                        /// <param name=\"name\" type=\"String\">The name of the object to lift.</param>\n                        /// <param name=\"obj\" type=\"Object\">Any, arbitrary Object to use as the value.</param>\n                        /// <returns type=\"Object\">The value of the new property.</returns>\n                        if (name && obj) {\n                            Object.defineProperty(ret, name, {\n                                value: obj,\n                                writable: false,\n                                enumerable: false,\n                                configurable: false\n                            });\n                            tree[name] = typeof (obj);\n                            OjInternal.alertDependents('OJ.' + spacename + '.' + name);\n                        }\n                        return obj;\n                    }\n                });\n\n                /**\n                 *\tCreate a new, static namespace on the current parent (e.g. OJ.to... || OJ.is...)\n                 *   @param (String) subNameSpace The name of the new namespace.\n                 *   @return (Object) The new namespace.\n                 */\n                Object.defineProperty(proto, 'makeSubNameSpace', {\n                    value: function (subNameSpace) {\n                        'use strict';\n                        /// <summary>Create a new, static namespace on the current parent (e.g. OJ.to... || OJ.is...).</summary>\n                        /// <param name=\"subNameSpace\" type=\"String\">The name of the new namespace.</param>\n                        /// <returns type=\"Object\">The new namespace.</returns>\n                        tree[subNameSpace] = Object.create(null);\n                        OjInternal.alertDependents('OJ.' + subNameSpace);\n                        return Object.defineProperty(ret, subNameSpace, {\n                            value: makeNameSpace(null, tree[subNameSpace], subNameSpace),\n                            writable: false,\n                            enumerable: false,\n                            configurable: false\n                        });\n                    }\n                });\n\n                return ret;\n            };\n\n            var OjOut = makeNameSpace(prototype, OjTree['OJ']);\n\n            OjOut.lift('?', domVendor);\n\n\n            /**\n             *    \"Depend\" an Object upon another member of this namespace, upon another namespace,\n             *   or upon a member of another namespace\n             *   @param (Array) array of dependencies for this method\n             *   @param (Function) obj Any, arbitrary Object to use as the value\n             */\n            var dependsOn = function (dependencies, callBack, imports) {\n                'use strict';\n                var ret = false;\n                var OjMembers = OjInternal.getOjMembers();\n                if (dependencies && dependencies.length > 0 && callBack) {\n                    var missing = dependencies.filter(function (depen) {\n                        return (OjMembers.indexOf(depen) === -1 && (!imports || imports !== depen));\n                    });\n                    if (missing.length === 0) {\n                        ret = true;\n                        callBack();\n                    }\n                    else {\n                        OjInternal.dependents.push(function (imports) {\n                            return dependsOn(missing, callBack, imports);\n                        });\n                    }\n                }\n                return ret;\n            };\n            Object.defineProperty(OjOut, 'dependsOn', {\n                value: dependsOn\n            });\n\n\n            Object.defineProperty(OjOut, 'tree', {\n                value: OjTree\n            });\n\n            return OjOut;\n\n        }())\n    });\n\n    OJ.makeSubNameSpace('errors');\n\n    OJ.makeSubNameSpace('is');\n\n\n    /**\n     * The MetaData namespace. Represents the structures of OJ nodes, elements and properties.\n     */\n    OJ.makeSubNameSpace('metadata');\n\n    /**\n     * The node namespace. Represents an OJ Node and its properties.\n     * [1]: This class is responsible for constructing the DOM getters (properties on this object which reference Nodes in the DOM tree)\n     * [2]: This class exposes helper methods which can get/set properties on this instance of the node.\n     * [3]: This class validates the execution of these methods (e.g. Is the node still in the DOM; has it been GC'd behind our backs)\n     * [4]: Maintaining an im-memory representation of tree with children/parents\n     */\n    OJ.makeSubNameSpace('node');\n\n    OJ.makeSubNameSpace('to');\n\n\n}(jQuery));"]],"start1":0,"start2":0,"length1":0,"length2":8348}]],"length":8348,"saved":false}
