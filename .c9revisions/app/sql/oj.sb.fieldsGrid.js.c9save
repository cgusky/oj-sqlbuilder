{"ts":1367458418488,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/* global window:true, Ext:true */\n\n(function() {\n\n    Ext.define('Ext.oj-sqlbuilder.SQLFieldsGrid', {\n        requires: ['Ext.ux.CheckColumn'],\n        extend: 'Ext.grid.Panel',\n        alias: ['widget.sqlfieldsgrid'],\n        id: 'SQLFieldsGrid',\n        store: 'SQLFieldsStore',\n        columnLines: true,\n        plugins: [Ext.create('Ext.grid.plugin.CellEditing', {\n            clicksToEdit: 1\n        })],\n        viewConfig: {\n            listeners: {\n                render: function(view) {\n                    this.dd = {};\n                    this.dd.dropZone = new Ext.grid.ViewDropZone({\n                        view: view,\n                        ddGroup: 'SQLTableGridDDGroup',\n                        handleNodeDrop: function(data, record, position) {\n                            // Was soll nach dem Drop passieren?\n                        }\n                    });\n                },\n                drop: function(node, data, dropRec, dropPosition) {\n                    // add new rows to the SQLFieldsGrid after a drop\n                    for (var i = 0, l = data.records.length; i < l; i++) {\n                        oj.sql.builder.sqlSelect.addFieldRecord(data.records[i], false);\n                    }\n                }\n            }\n        },\n        columns: [{\n            xtype: 'actioncolumn',\n            menuDisabled: true,\n            text: 'Action',\n            width: 60,\n            moveGridRow: function(grid, record, index, direction) {\n                var store = grid.getStore();\n                if (direction < 0) {\n                    index--;\n                    if (index < 0) {\n                        return;\n                    }\n                }\n                else {\n                    index++;\n                    if (index >= grid.getStore().getCount()) {\n                        return;\n                    }\n                }\n                // prepare manual syncing\n                store.suspendAutoSync();\n                // disable firing store events\n                store.suspendEvents();\n                // remove record and insert record at new index\n                store.remove(record);\n                store.insert(index, record);\n                // enable firing store events\n                store.resumeEvents();\n                store.resumeAutoSync();\n                // manual sync the store\n                store.sync();\n            },\n            items: [{\n                icon: 'resources/images/up_arrow.gif',\n                tooltip: 'Move Column Up',\n                getClass: function(value, metadata, record) {\n                    var store, index;\n                    store = record.store;\n                    index = store.indexOf(record);\n                    if (index == 0) {\n                        return 'x-action-icon-disabled';\n                    }\n                    else {\n                        return 'x-grid-center-icon';\n                    }\n                },\n                handler: function(grid, rowIndex, colIndex) {\n                    var rec = grid.getStore().getAt(rowIndex);\n                    this.moveGridRow(grid, rec, rowIndex, - 1);\n                }\n            }, {\n                icon: 'resources/images/down_arrow.gif',\n                getClass: function(value, metadata, record) {\n                    var store, index;\n                    store = record.store;\n                    index = store.indexOf(record);\n                    if ((index + 1) == store.getCount()) {\n                        return 'x-action-icon-disabled';\n                    }\n                    else {\n                        return 'x-grid-center-icon';\n                    }\n                },\n                tooltip: 'Move Column Down',\n                handler: function(grid, rowIndex, colIndex) {\n                    var rec = grid.getStore().getAt(rowIndex);\n                    this.moveGridRow(grid, rec, rowIndex, 1);\n                }\n            }, {\n                icon: 'resources/images/remove.gif',\n                iconCls: 'x-grid-center-icon',\n                tooltip: 'Delete Column',\n                handler: function(grid, rowIndex, colIndex) {\n                    var rec = grid.getStore().getAt(rowIndex),\n                        store, tableId, tableGrid, selectionModel, bDel = true;\n                    // rec contains column grid model, the one to remove\n                    // get tableId of original sqltable\n                    tableId = rec.get('extCmpId');\n                    // get the sql tables grid and its selection\n                    tableGrid = Ext.getCmp(tableId).down('gridpanel');\n                    selectionModel = tableGrid.getSelectionModel();\n                    Ext.Array.each(selectionModel.getSelection(), function(selection) {\n                        // deselect the selection wich corresponds to the column\n                        // we want to remove from the column grid\n                        if (rec.get('id') == selection.get('id')) {\n                            // deselect current selection\n                            // deselection will lead to removal, look for method deselect at the SQLTableGrid\n                            selectionModel.deselect(selection);\n                            bDel = false;\n                        }\n                    });\n                    if (bDel) {\n                        store = grid.getStore();\n                        store.remove(rec);\n                    }\n                }\n            }]\n        }, {\n            xtype: 'checkcolumn',\n            sortable: false,\n            text: 'Output',\n            flex: 0.075,\n            menuDisabled: true,\n            dataIndex: 'output',\n            align: 'center'\n        }, {\n            xtype: 'gridcolumn',\n            text: 'Expression',\n            sortable: false,\n            menuDisabled: true,\n            flex: 0.225,\n            dataIndex: 'expression',\n            editor: 'textfield'\n        }, {\n            xtype: 'gridcolumn',\n            text: 'Aggregate',\n            flex: 0.125,\n            sortable: false,\n            menuDisabled: true,\n            dataIndex: 'aggregate',\n            editor: 'textfield'\n        }, {\n            xtype: 'gridcolumn',\n            text: 'Alias',\n            flex: 0.125,\n            sortable: false,\n            menuDisabled: true,\n            dataIndex: 'alias',\n            editor: 'textfield'\n        }, {\n            xtype: 'gridcolumn',\n            text: 'Sort Type',\n            flex: 0.125,\n            sortable: false,\n            menuDisabled: true,\n            dataIndex: 'sorttype'\n        }, {\n            xtype: 'gridcolumn',\n            text: 'Sort Order',\n            flex: 0.125,\n            sortable: false,\n            menuDisabled: true,\n            dataIndex: 'sortorder'\n        }, {\n            xtype: 'checkcolumn',\n            text: 'Grouping',\n            flex: 0.075,\n            sortable: false,\n            menuDisabled: true,\n            dataIndex: 'grouping',\n            align: 'center'\n        }, {\n            xtype: 'gridcolumn',\n            text: 'Criteria',\n            flex: 0.125,\n            sortable: false,\n            menuDisabled: true,\n            dataIndex: 'criteria',\n            editor: 'textfield'\n        }],\n        initComponent: function() {\n            this.callParent(arguments);\n        }\n    });\n\n}());"]],"start1":0,"start2":0,"length1":0,"length2":7368}]],"length":7368}
{"contributors":[],"silentsave":true,"ts":1367458717676,"patch":[[{"diffs":[[0,"/*"],[1," jshint"],[0," global "]],"start1":0,"start2":0,"length1":10,"length2":17}]],"length":7375,"saved":false}
{"ts":1367458723597,"patch":[[{"diffs":[[0,"int "],[-1,"global"],[0," win"]],"start1":6,"start2":6,"length1":14,"length2":8}]],"length":7369,"saved":false}
{"ts":1367458728908,"patch":[[{"diffs":[[0,"  window"],[-1,":true"],[0,", Ext:tr"]],"start1":9,"start2":9,"length1":21,"length2":16}]],"length":7364,"saved":false}
{"ts":1367458733863,"patch":[[{"diffs":[[0," Ext"],[-1,":true"],[0," */\n"]],"start1":18,"start2":18,"length1":13,"length2":8}]],"length":7359,"saved":false}
{"ts":1367458777812,"patch":[[{"diffs":[[0,"nt  "],[-1,"window, Ext"],[0," */\n"]],"start1":7,"start2":7,"length1":19,"length2":8}]],"length":7348,"saved":false}
{"ts":1367458780632,"patch":[[{"diffs":[[0,"nt   */\n"],[1,"//"],[0,"\n(functi"]],"start1":7,"start2":7,"length1":16,"length2":18}]],"length":7350,"saved":false}
{"ts":1367458781896,"patch":[[{"diffs":[[0,"t   */\n/"],[1,"* *"],[0,"/\n(funct"]],"start1":8,"start2":8,"length1":16,"length2":19}]],"length":7353,"saved":false}
{"ts":1367458783328,"patch":[[{"diffs":[[0,"   */\n/*"],[1," g"],[0," */\n(fun"]],"start1":9,"start2":9,"length1":16,"length2":18}]],"length":7355,"saved":false}
{"ts":1367458787298,"patch":[[{"diffs":[[0," */\n/* g"],[1,"lobal Ext "],[0," */\n(fun"]],"start1":11,"start2":11,"length1":16,"length2":26}]],"length":7365,"saved":false}
{"ts":1367458809550,"patch":[[{"diffs":[[-1,"/* jshint   */"],[1,"undef: true, unused: true"],[0,"\n/* "]],"start1":0,"start2":0,"length1":18,"length2":29}]],"length":7376,"saved":false}
{"ts":1367458810742,"patch":[[{"diffs":[[-1,"undef: true, unused: true"],[1,"/* jshint   */"],[0,"\n/* "]],"start1":0,"start2":0,"length1":29,"length2":18}]],"length":7365,"saved":false}
{"ts":1367458812867,"patch":[[{"diffs":[[0,"jshint  "],[1,"undef: true, unused: true"],[0," */\n/* g"]],"start1":3,"start2":3,"length1":16,"length2":41}]],"length":7390,"saved":false}
{"ts":1367458814887,"patch":[[{"diffs":[[0," jshint "],[-1," "],[0,"undef: t"]],"start1":2,"start2":2,"length1":17,"length2":16}]],"length":7389,"saved":false}
