{"ts":1367457553371,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/* global window:true, Ext:true */\n\n(function() {\n\n    Ext.define('Ext.oj-sqlbuilder.SQLFieldsGrid', {\n        requires: ['Ext.ux.CheckColumn'],\n        extend: 'Ext.grid.Panel',\n        alias: ['widget.sqlfieldsgrid'],\n        id: 'SQLFieldsGrid',\n        store: 'SQLFieldsStore',\n        columnLines: true,\n        plugins: [Ext.create('Ext.grid.plugin.CellEditing', {\n            clicksToEdit: 1\n        })],\n        viewConfig: {\n            listeners: {\n                render: function(view) {\n                    this.dd = {};\n                    this.dd.dropZone = new Ext.grid.ViewDropZone({\n                        view: view,\n                        ddGroup: 'SQLTableGridDDGroup',\n                        handleNodeDrop: function(data, record, position) {\n                            // Was soll nach dem Drop passieren?\n                        }\n                    });\n                },\n                drop: function(node, data, dropRec, dropPosition) {\n                    // add new rows to the SQLFieldsGrid after a drop\n                    for (var i = 0, l = data.records.length; i < l; i++) {\n                        oj.sql.builder.sqlSelect.addFieldRecord(data.records[i], false);\n                    }\n                }\n            }\n        },\n        columns: [{\n            xtype: 'actioncolumn',\n            menuDisabled: true,\n            text: 'Action',\n            width: 60,\n            moveGridRow: function(grid, record, index, direction) {\n                var store = grid.getStore();\n                if (direction < 0) {\n                    index--;\n                    if (index < 0) {\n                        return;\n                    }\n                }\n                else {\n                    index++;\n                    if (index >= grid.getStore().getCount()) {\n                        return;\n                    }\n                }\n                // prepare manual syncing\n                store.suspendAutoSync();\n                // disable firing store events\n                store.suspendEvents();\n                // remove record and insert record at new index\n                store.remove(record);\n                store.insert(index, record);\n                // enable firing store events\n                store.resumeEvents();\n                store.resumeAutoSync();\n                // manual sync the store\n                store.sync();\n            },\n            items: [{\n                icon: 'resources/images/up_arrow.gif',\n                tooltip: 'Move Column Up',\n                getClass: function(value, metadata, record) {\n                    var store, index;\n                    store = record.store;\n                    index = store.indexOf(record);\n                    if (index == 0) {\n                        return 'x-action-icon-disabled';\n                    }\n                    else {\n                        return 'x-grid-center-icon';\n                    }\n                },\n                handler: function(grid, rowIndex, colIndex) {\n                    var rec = grid.getStore().getAt(rowIndex);\n                    this.moveGridRow(grid, rec, rowIndex, - 1);\n                }\n            }, {\n                icon: 'resources/images/down_arrow.gif',\n                getClass: function(value, metadata, record) {\n                    var store, index;\n                    store = record.store;\n                    index = store.indexOf(record);\n                    if ((index + 1) == store.getCount()) {\n                        return 'x-action-icon-disabled';\n                    }\n                    else {\n                        return 'x-grid-center-icon';\n                    }\n                },\n                tooltip: 'Move Column Down',\n                handler: function(grid, rowIndex, colIndex) {\n                    var rec = grid.getStore().getAt(rowIndex);\n                    this.moveGridRow(grid, rec, rowIndex, 1);\n                }\n            }, {\n                icon: 'resources/images/remove.gif',\n                iconCls: 'x-grid-center-icon',\n                tooltip: 'Delete Column',\n                handler: function(grid, rowIndex, colIndex) {\n                    var rec = grid.getStore().getAt(rowIndex),\n                        store, tableId, tableGrid, selectionModel, bDel = true;\n                    // rec contains column grid model, the one to remove\n                    // get tableId of original sqltable\n                    tableId = rec.get('extCmpId');\n                    // get the sql tables grid and its selection\n                    tableGrid = Ext.getCmp(tableId).down('gridpanel');\n                    selectionModel = tableGrid.getSelectionModel();\n                    Ext.Array.each(selectionModel.getSelection(), function(selection) {\n                        // deselect the selection wich corresponds to the column\n                        // we want to remove from the column grid\n                        if (rec.get('id') == selection.get('id')) {\n                            // deselect current selection\n                            // deselection will lead to removal, look for method deselect at the SQLTableGrid\n                            selectionModel.deselect(selection);\n                            bDel = false;\n                        }\n                    });\n                    if (bDel) {\n                        store = grid.getStore();\n                        store.remove(rec);\n                    }\n                }\n            }]\n        }, {\n            xtype: 'checkcolumn',\n            sortable: false,\n            text: 'Output',\n            flex: 0.075,\n            menuDisabled: true,\n            dataIndex: 'output',\n            align: 'center'\n        }, {\n            xtype: 'gridcolumn',\n            text: 'Expression',\n            sortable: false,\n            menuDisabled: true,\n            flex: 0.225,\n            dataIndex: 'expression',\n            editor: 'textfield'\n        }, {\n            xtype: 'gridcolumn',\n            text: 'Aggregate',\n            flex: 0.125,\n            sortable: false,\n            menuDisabled: true,\n            dataIndex: 'aggregate',\n            editor: 'textfield'\n        }, {\n            xtype: 'gridcolumn',\n            text: 'Alias',\n            flex: 0.125,\n            sortable: false,\n            menuDisabled: true,\n            dataIndex: 'alias',\n            editor: 'textfield'\n        }, {\n            xtype: 'gridcolumn',\n            text: 'Sort Type',\n            flex: 0.125,\n            sortable: false,\n            menuDisabled: true,\n            dataIndex: 'sorttype'\n        }, {\n            xtype: 'gridcolumn',\n            text: 'Sort Order',\n            flex: 0.125,\n            sortable: false,\n            menuDisabled: true,\n            dataIndex: 'sortorder'\n        }, {\n            xtype: 'checkcolumn',\n            text: 'Grouping',\n            flex: 0.075,\n            sortable: false,\n            menuDisabled: true,\n            dataIndex: 'grouping',\n            align: 'center'\n        }, {\n            xtype: 'gridcolumn',\n            text: 'Criteria',\n            flex: 0.125,\n            sortable: false,\n            menuDisabled: true,\n            dataIndex: 'criteria',\n            editor: 'textfield'\n        }],\n        initComponent: function() {\n            this.callParent(arguments);\n        }\n    });\n\n}());"]],"start1":0,"start2":0,"length1":0,"length2":7368}]],"length":7368}
{"contributors":[],"silentsave":true,"ts":1367457623149,"patch":[[{"diffs":[[0,".SQL"],[-1,"FieldsGrid', {\n        requires: ['Ext.ux.CheckColumn'],\n        extend: 'Ext.grid.Panel',\n        alias: ['widget.sqlfieldsgrid'],\n        id: 'SQLFieldsGrid',\n        store: 'SQLFieldsStore',\n        columnLines: true,\n        plugins: [Ext.create('Ext.grid.plugin.CellEditing', {\n            clicksToEdit: 1\n        })],\n        viewConfig: {\n            listeners: {\n                render: function(view) {\n                    this.dd = {};\n                    this.dd.dropZone = new Ext.grid.ViewDropZone({\n                        view: view,\n                        ddGroup: 'SQLTableGridDDGroup',\n                        handleNodeDrop: function(data, record, position) {\n                            // Was soll nach dem Drop passieren?\n                        }\n                    });\n                },\n                drop: function(node, data, dropRec, dropPosition) {\n                    // add new rows to the SQLFieldsGrid after a drop\n                    for (var i = 0, l = data.records.length; i < l; i++) {\n                        oj.sql.builder.sqlSelect.addFieldRecord(data.records[i], false);\n                    }\n                }\n            }\n        },\n        columns: [{\n            xtype: 'actioncolumn',\n            menuDisabled: true,\n            text: 'Action',\n            width: 60,\n            moveGridRow: function(grid, record, index, direction) {\n                var store = grid.getStore();\n                if (direction < 0) {\n                    index--;\n                    if (index < 0) {\n                        return;\n                    }\n                }\n                else {\n                    index++;\n                    if (index >= grid.getStore().getCount()) {\n                        return;\n                    }\n                }\n                // prepare manual syncing\n                store.suspendAutoSync();\n                // disable firing store events\n                store.suspendEvents();\n                // remove record and insert record at new index\n                store.remove(record);\n                store.insert(index, record);\n                // enable firing store events\n                store.resumeEvents();\n                store.resumeAutoSync();\n                // manual sync the store\n                store.sync();\n            },\n            items: [{\n                icon: 'resources/images/up_arrow.gif',\n                tooltip: 'Move Column Up',\n                getClass: function(value, metadata, record) {\n                    var store, index;\n                    store = record.store;\n                    index = store.indexOf(record);\n                    if (index == 0) {\n                        return 'x-action-icon-disabled';\n                    }\n                    else {\n                        return 'x-grid-center-icon';\n                    }\n                },\n                handler: function(grid, rowIndex, colIndex) {\n                    var rec = grid.getStore().getAt(rowIndex);\n                    this.moveGridRow(grid, rec, rowIndex, - 1);\n                }\n            }, {\n                icon: 'resources/images/down_arrow.gif',\n                getClass: function(value, metadata, record) {\n                    var store, index;\n                    store = record.store;\n                    index = store.indexOf(record);\n                    if ((index + 1) == store.getCount()) {\n                        return 'x-action-icon-disabled';\n                    }\n                    else {\n                        return 'x-grid-center-icon';\n                    }\n                },\n                tooltip: 'Move Column Down',\n                handler: function(grid, rowIndex, colIndex) {\n                    var rec = grid.getStore().getAt(rowIndex);\n                    this.moveGridRow(grid, rec, rowIndex, 1);\n                }\n            }, {\n                icon: 'resources/images/remove.gif',\n                iconCls: 'x-grid-center-icon',\n                tooltip: 'Delete Column',\n                handler: function(grid, rowIndex, colIndex) {\n                    var rec = grid.getStore().getAt(rowIndex),\n                        store, tableId, tableGrid, selectionModel, bDel = true;\n                    // rec contains column grid model, the one to remove\n                    // get tableId of original sqltable\n                    tableId = rec.get('extCmpId');\n                    // get the sql tables grid and its selection\n                    tableGrid = Ext.getCmp(tableId).down('gridpanel');\n                    selectionModel = tableGrid.getSelectionModel();\n                    Ext.Array.each(selectionModel.getSelection(), function(selection) {\n                        // deselect the selection wich corresponds to the column\n                        // we want to remove from the column grid\n                        if (rec.get('id') == selection.get('id')) {\n                            // deselect current selection\n                            // deselection will lead to removal, look for method deselect at the SQLTableGrid\n                            selectionModel.deselect(selection);\n                            bDel = false;\n                        }\n                    });\n                    if (bDel) {\n                        store = grid.getStore();\n                        store.remove(rec);\n                    }\n                }\n            }]\n        }, {\n            xtype: 'checkcolumn',\n            sortable: false,\n            text: 'Output',\n            flex: 0.075,\n            menuDisabled: true,\n            dataIndex: 'output',\n            align: 'center'\n        }, {\n            xtype: 'gridcolumn',\n            text: 'Expression',\n            sortable: false,\n            menuDisabled: true,\n            flex: 0.225,\n            dataIndex: 'expression',\n            editor: 'textfield'\n        }, {\n            xtype: 'gridcolumn',\n            text: 'Aggregate',\n            flex: 0.125,\n            sortable: false,\n            menuDisabled: true,\n            dataIndex: 'aggregate',\n            editor: 'textfield'\n        }, {\n            xtype: 'gridcolumn',\n            text: 'Alias',\n            flex: 0.125,\n            sortable: false,\n            menuDisabled: true,\n            dataIndex: 'alias',\n            editor: 'textfield'\n        }, {\n            xtype: 'gridcolumn',\n            text: 'Sort Type',\n            flex: 0.125,\n            sortable: false,\n            menuDisabled: true,\n            dataIndex: 'sorttype'\n        }, {\n            xtype: 'gridcolumn',\n            text: 'Sort Order',\n            flex: 0.125,\n            sortable: false,\n            menuDisabled: true,\n            dataIndex: 'sortorder'\n        }, {\n            xtype: 'checkcolumn',\n            text: 'Grouping',\n            flex: 0.075,\n            sortable: false,\n            menuDisabled: true,\n            dataIndex: 'grouping',\n            align: 'center'\n        }, {\n            xtype: 'gridcolumn',\n            text: 'Criteria',\n            flex: 0.125,\n            sortable: false,\n            menuDisabled: true,\n            dataIndex: 'criteria',\n            editor: 'textfield'\n        }],\n        initComponent: function() {\n            this.callParent(arguments);\n        }\n    "],[1,"TableGrid', {\n    extend: 'Ext.grid.Panel',\n    alias: ['widget.sqltablegrid'],\n    border: false,\n    hideHeaders: true,\n    viewConfig: {\n        listeners: {\n            bodyscroll: function(){\n                var scrollOffset, sqlTable;\n                // the bodyscroll event of the view was fired\n                // get scroll information\n                scrollOffset = this.el.getScroll();\n                // get the parent sqltable\n                sqlTable = this.up('sqltable');\n                // change shadowSprites scrollTop property\n                sqlTable.shadowSprite.scrollTop = scrollOffset.top;\n                // redraw all connections to reflect scroll action\n                for (var i = oj.sql.builder.connections.length; i--;) {\n                    sqlTable.connection(oj.sql.builder.connections[i]);\n                }\n            },\n            render: function(view){\n                this.dd = {};\n                // init the view as a DragZone\n                this.dd.dragZone = new Ext.view.DragZone({\n                    view: view,\n                    ddGroup: 'SQLTableGridDDGroup',\n                    dragText: '{0} selected table column{1}',\n                    onInitDrag: function(x, y){\n                        var me = this, data = me.dragData, view = data.view, selectionModel = view.getSelectionModel(), record = view.getRecord(data.item), e = data.event;\n                        data.records = [record];\n                        me.ddel.update(me.getDragText());\n                        me.proxy.update(me.ddel.dom);\n                        me.onStartDrag(x, y);\n                        return true;\n                    }\n                });\n                // init the view as a DropZone\n                this.dd.dropZone = new Ext.grid.ViewDropZone({\n                    view: view,\n                    ddGroup: 'SQLTableGridDDGroup',\n                    handleNodeDrop: function(data, record, position){\n                        // Was soll nach dem Drop passieren?\n                    },\n                    onNodeOver: function(node, dragZone, e, data){\n                        var me = this, view = me.view, pos = me.getPosition(e, node), overRecord = view.getRecord(node), draggingRecords = data.records;\n\n                        if (!Ext.Array.contains(data.records, me.view.getRecord(node))) {\n                            if (!Ext.Array.contains(draggingRecords, overRecord) && data.records[0].get('field') != '*') {\n                                me.valid = true;\n                                // valid drop target\n                                // todo show drop invitation\n                            }\n                            else {\n                                // invalid drop target\n                                me.valid = false;\n                            }\n                        }\n                        return me.valid ? me.dropAllowed : me.dropNotAllowed;\n                    },\n                    onContainerOver: function(dd, e, data){\n                        var me = this;\n                        // invalid drop target\n                        me.valid = false;\n                        return me.dropNotAllowed;\n                    }\n                });\n            },\n            drop: function(node, data, dropRec, dropPosition){\n                var sqlTable1, sqlTable2, showJoinCM, connection, aBBPos, join, joinCondition = '', dropTable, targetTable;\n\n                showJoinCM = function(event, el){\n                    var cm;\n                    // stop the browsers event bubbling\n                    event.stopEvent();\n                    // create context menu\n                    cm = Ext.create('Ext.menu.Menu', {\n                        items: [{\n                            text: 'Edit Join',\n                            icon: 'resources/images/document_edit16x16.gif',\n                            handler: Ext.Function.bind(function(){\n\n                            }, this)\n                        }, {\n                            text: 'Remove Join',\n                            icon: 'resources/images/remove.gif',\n                            handler: Ext.Function.bind(function(){\n                                // remove any connection lines from surface and from array oj.sql.builder.connections\n                                oj.sql.builder.connections = Ext.Array.filter(oj.sql.builder.connections, function(connection){\n                                    var bRemove = true;\n                                    if (this.uuid == connection.uuid) {\n                                        this.line.remove();\n                                        this.bgLine.remove();\n                                        this.miniLine1.remove();\n                                        this.miniLine2.remove();\n                                        bRemove = false;\n                                    }\n                                    return bRemove;\n                                }, this);\n                                oj.sql.builder.sqlSelect.removeJoinById(this.uuid);\n                            }, this)\n                        }, {\n                            text: 'Close Menu',\n                            icon: 'resources/images/cross.gif',\n                            handler: Ext.emptyFn\n                        }]\n                    });\n                    // show the contextmenu next to current mouse position\n                    cm.showAt(event.getXY());\n                };\n\n                if (node.boundView) {\n                    sqlTable1 = data.view.up('window');\n                    sqlTable1.shadowSprite.bConnections = true;\n\n                    sqlTable2 = Ext.getCmp(node.boundView).up('window');\n                    sqlTable2.shadowSprite.bConnections = true;\n\n                    dropTable = oj.sql.builder.sqlSelect.getTableById(sqlTable1.tableId);\n                    targetTable = oj.sql.builder.sqlSelect.getTableById(sqlTable2.tableId);\n\n                    aBBPos = [data.item.viewIndex, node.viewIndex];\n\n                    connection = sqlTable2.connection(sqlTable1.shadowSprite, sqlTable2.shadowSprite, \"#000\", aBBPos);\n\n                    sqlTable1.connectionUUIDs.push(connection.uuid);\n                    sqlTable2.connectionUUIDs.push(connection.uuid);\n\n                    oj.sql.builder.connections.push(connection);\n\n                    // bgLine is white(invisble) and its stroke-width is 10\n                    // so it is easier to capture the dblclick event\n                    connection.bgLine.el.on('contextmenu', showJoinCM, connection);\n\n                    // line is black and its stroke-width is 1\n                    connection.line.el.on('contextmenu', showJoinCM, connection);\n\n                    // create an instance of the join model\n                    join = Ext.create('Ext.oj-sqlbuilder.SQLJoin');\n                    // set join id\n                    join.set('id', connection.uuid);\n                    // sqlTable1 is the left table\n                    join.set('leftTableId', sqlTable1.tableId);\n                    // data.records[0] represents the model of the dragged node\n                    join.set('leftTableField', data.records[0].get('field'));\n                    // sqlTable1 is the left table\n                    join.set('rightTableId', sqlTable2.tableId);\n                    // node.viewIndex is the index of the target node\n                    join.set('rightTableField', sqlTable2.down('grid').store.getAt(node.viewIndex).get('field'));\n                    // set the defaul join type to INNER\n                    join.set('joinType', 'INNER');\n\n                    if (dropTable.get('tableAlias') != '') {\n                        joinCondition = joinCondition + dropTable.get('tableAlias') + '.' + join.get('leftTableField') + '=';\n                    }\n                    else {\n                        joinCondition = joinCondition + dropTable.get('tableName') + '.' + join.get('leftTableField') + '=';\n                    }\n\n                    if (targetTable.get('tableAlias') != '') {\n                        joinCondition = joinCondition + targetTable.get('tableAlias') + '.' + join.get('rightTableField');\n                    }\n                    else {\n                        joinCondition = joinCondition + targetTable.get('tableName') + '.' + join.get('rightTableField');\n                    }\n\n                    join.set('joinCondition', joinCondition);\n                    oj.sql.builder.sqlSelect.addJoin(join);\n                }\n\n            }\n        }\n    },\n    initComponent: function(){\n\n        this.columns = [{\n            xtype: 'gridcolumn',\n            width: 16,\n            dataIndex: 'key',\n            renderer: function(val, meta, model){\n                if (val == 'PRI') {\n                    meta.style = 'background-image:url(resources/images/key.gif) !important;background-position:2px 3px;background-repeat:no-repeat;';\n                }\n                return '&nbsp;';\n            }\n        }, {\n            xtype: 'gridcolumn',\n            flex: 1,\n            dataIndex: 'field',\n            renderer: function(val, meta, model){\n                if (model.get('key') == 'PRI') {\n                    return '<span style=\"font-weight: bold;\">' + val + '</span>&nbsp;&nbsp;<span style=\"color:#aaa;\">' + model.get('type') + '</span>';\n                }\n                return val + '&nbsp;&nbsp;<span style=\"color:#999;\">' + model.get('type') + '</span>';\n\n            }\n        }];\n\n        this.selModel = Ext.create('Ext.selection.CheckboxModel', {\n            mode: 'SIMPLE',\n            checkOnly: true,\n            listeners: {\n                select: function(selModel, data){\n                    // add new rows to the SQLFieldsGrid after a selection change\n                    oj.sql.builder.sqlSelect.addFieldRecord(data, true);\n                },\n                deselect: function(selModel, data){\n                    var store, model;\n                    // remove row from SQLFieldsGrid after deselection\n                    oj.sql.builder.sqlSelect.removeFieldById(data.get('id'));\n                }\n            }\n        });\n\n        this.callParent(arguments);\n    }\n"],[0,"});\n"]],"start1":84,"start2":84,"length1":7278,"length2":10237}]],"length":10327,"saved":false}
{"ts":1367457624665,"patch":[[{"diffs":[[0,"bleGrid', {\n"],[1,"    "],[0,"    extend: "]],"start1":90,"start2":90,"length1":24,"length2":28},{"diffs":[[0,"Panel',\n"],[1,"    "],[0,"    alia"]],"start1":128,"start2":128,"length1":16,"length2":20},{"diffs":[[0,"grid'],\n"],[1,"    "],[0,"    bord"]],"start1":168,"start2":168,"length1":16,"length2":20},{"diffs":[[0,"se,\n    "],[1,"   "],[1," "],[0,"hideHead"]],"start1":195,"start2":195,"length1":16,"length2":20},{"diffs":[[0,"ders: true,\n"],[1,"    "],[0,"    viewConf"]],"start1":214,"start2":214,"length1":24,"length2":28},{"diffs":[[0,"nfig: {\n        "],[1,"   "],[1," "],[0,"listeners: {\n   "]],"start1":240,"start2":240,"length1":32,"length2":36},{"diffs":[[0,"   listeners: {\n"],[1,"    "],[0,"            body"]],"start1":257,"start2":257,"length1":32,"length2":36},{"diffs":[[0,"roll: function()"],[1," "],[0,"{\n              "]],"start1":295,"start2":295,"length1":32,"length2":33},{"diffs":[[0,"            "],[1," "],[1,"   "],[0,"var scrollOf"]],"start1":318,"start2":318,"length1":24,"length2":28},{"diffs":[[0,"lTable;\n"],[1,"    "],[0,"        "]],"start1":354,"start2":354,"length1":16,"length2":20},{"diffs":[[0,"            "],[1,"    "],[0,"// get scrol"]],"start1":432,"start2":432,"length1":24,"length2":28},{"diffs":[[0,"information\n"],[1,"    "],[0,"            "]],"start1":462,"start2":462,"length1":24,"length2":28},{"diffs":[[0,"            "],[1,"    "],[0,"// get the p"]],"start1":534,"start2":534,"length1":24,"length2":28},{"diffs":[[0,"nt sqltable\n"],[1,"    "],[0,"            "]],"start1":565,"start2":565,"length1":24,"length2":28},{"diffs":[[0,"            "],[1,"    "],[0,"// change sh"]],"start1":633,"start2":633,"length1":24,"length2":28},{"diffs":[[0,"                "],[1,"   "],[1," "],[0,"sqlTable.shadowS"]],"start1":692,"start2":692,"length1":32,"length2":36},{"diffs":[[0,"            "],[1,"    "],[0,"// redraw al"]],"start1":768,"start2":768,"length1":24,"length2":28},{"diffs":[[0,"        "],[1,"   "],[1," "],[0,"for (var"]],"start1":843,"start2":843,"length1":16,"length2":20},{"diffs":[[0,"                "],[1,"    "],[0,"sqlTable.connect"]],"start1":915,"start2":915,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"  "],[-1,"}\n"],[1,"  }\n    "],[0,"            },\n "]],"start1":987,"start2":987,"length1":34,"length2":42},{"diffs":[[0,"             },\n"],[1,"    "],[0,"            rend"]],"start1":1012,"start2":1012,"length1":32,"length2":36},{"diffs":[[0,"on(view)"],[1," "],[0,"{\n"],[1,"    "],[0,"        "]],"start1":1058,"start2":1058,"length1":18,"length2":23},{"diffs":[[0,"                "],[1,"    "],[0,"// init the view"]],"start1":1103,"start2":1103,"length1":32,"length2":36},{"diffs":[[0," a DragZone\n"],[1,"    "],[0,"            "]],"start1":1142,"start2":1142,"length1":24,"length2":28},{"diffs":[[0,"                "],[1,"    "],[0,"view: view,\n    "]],"start1":1221,"start2":1221,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"   "],[1," "],[0,"ddGroup: 'SQLTab"]],"start1":1257,"start2":1257,"length1":32,"length2":36},{"diffs":[[0,"leGridDDGroup',\n"],[1,"    "],[0,"                "]],"start1":1293,"start2":1293,"length1":32,"length2":36},{"diffs":[[0,"        "],[1,"    "],[0,"onInitDr"]],"start1":1387,"start2":1387,"length1":16,"length2":20},{"diffs":[[0,"on(x, y)"],[1," "],[0,"{\n"],[1,"    "],[0,"        "]],"start1":1417,"start2":1417,"length1":18,"length2":23},{"diffs":[[0,"his,"],[-1," data = me.dragData, view = data.view,"],[1,"\n                                data = me.dragData,\n                                view = data.view,\n                               "],[0," sel"]],"start1":1466,"start2":1466,"length1":46,"length2":142},{"diffs":[[0,"Model(),"],[1,"\n                               "],[0," record "]],"start1":1639,"start2":1639,"length1":16,"length2":48},{"diffs":[[0,"a.item),"],[1,"\n                               "],[0," e = dat"]],"start1":1707,"start2":1707,"length1":16,"length2":48},{"diffs":[[0,".event;\n"],[1,"    "],[0,"        "]],"start1":1756,"start2":1756,"length1":16,"length2":20},{"diffs":[[0,"        "],[1,"    "],[0,"me.ddel."]],"start1":1833,"start2":1833,"length1":16,"length2":20},{"diffs":[[0,"ragText());\n"],[1,"    "],[0,"            "]],"start1":1867,"start2":1867,"length1":24,"length2":28},{"diffs":[[0,"        "],[1,"    "],[0,"me.onSta"]],"start1":1953,"start2":1953,"length1":16,"length2":20},{"diffs":[[0,"            "],[1,"   "],[1," "],[0,"return true;"]],"start1":1999,"start2":1999,"length1":24,"length2":28},{"diffs":[[0,"                "],[-1,"}\n"],[1,"    }\n   "],[0,"                "]],"start1":2032,"start2":2032,"length1":34,"length2":41},{"diffs":[[0,"                "],[1," "],[0,"});\n"],[1,"    "],[0,"                "]],"start1":2057,"start2":2057,"length1":36,"length2":41},{"diffs":[[0,"                "],[1,"  "],[1,"  "],[0,"this.dd.dropZone"]],"start1":2129,"start2":2129,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"    "],[0,"view: view,\n    "]],"start1":2200,"start2":2200,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"  "],[1,"  "],[0,"ddGroup: 'SQLTab"]],"start1":2236,"start2":2236,"length1":32,"length2":36},{"diffs":[[0,"leGridDDGroup',\n"],[1,"    "],[0,"                "]],"start1":2272,"start2":2272,"length1":32,"length2":36},{"diffs":[[0,"ecord, position)"],[1," "],[0,"{\n              "]],"start1":2344,"start2":2344,"length1":32,"length2":33},{"diffs":[[0,"        "],[1,"    "],[0,"// Was s"]],"start1":2379,"start2":2379,"length1":16,"length2":20},{"diffs":[[0,"sieren?\n"],[1,"    "],[0,"        "]],"start1":2420,"start2":2420,"length1":16,"length2":20},{"diffs":[[0,"        "],[1,"    "],[0,"onNodeOv"]],"start1":2467,"start2":2467,"length1":16,"length2":20},{"diffs":[[0,"agZone, e, data)"],[1," "],[0,"{\n              "]],"start1":2508,"start2":2508,"length1":32,"length2":33},{"diffs":[[0,"                "],[1,"  "],[1,"  "],[0,"var me = this, v"]],"start1":2535,"start2":2535,"length1":32,"length2":36},{"diffs":[[0,"his,"],[-1," view = me.view, pos = me.getPosition(e, node),"],[1,"\n                                view = me.view,\n                                pos = me.getPosition(e, node),\n                               "],[0," ove"]],"start1":2565,"start2":2565,"length1":55,"length2":151},{"diffs":[[0,"d(node),"],[1,"\n                               "],[0," draggin"]],"start1":2739,"start2":2739,"length1":16,"length2":48},{"diffs":[[0,"                "],[1,"  "],[1,"  "],[0,"if (!Ext.Array.c"]],"start1":2821,"start2":2821,"length1":32,"length2":36},{"diffs":[[0,"d(node))) {\n"],[1,"    "],[0,"            "]],"start1":2895,"start2":2895,"length1":24,"length2":28},{"diffs":[[0,"                "],[1,"    "],[0,"me.valid = true;"]],"start1":3050,"start2":3050,"length1":32,"length2":36},{"diffs":[[0,"e.valid = true;\n"],[1,"    "],[0,"                "]],"start1":3071,"start2":3071,"length1":32,"length2":36},{"diffs":[[0,"            "],[1," "],[1,"   "],[0,"// todo show"]],"start1":3164,"start2":3164,"length1":24,"length2":28},{"diffs":[[0," invitation\n"],[1,"    "],[0,"            "]],"start1":3197,"start2":3197,"length1":24,"length2":28},{"diffs":[[0,"                "],[1,"    "],[0,"else {\n"],[1,"    "],[0,"                "]],"start1":3255,"start2":3255,"length1":39,"length2":47},{"diffs":[[0,"                "],[1,"    "],[0,"me.valid = false"]],"start1":3357,"start2":3357,"length1":32,"length2":36},{"diffs":[[0,".valid = false;\n"],[1,"    "],[0,"                "]],"start1":3379,"start2":3379,"length1":32,"length2":36},{"diffs":[[0,"                "],[-1,"}\n"],[1,"    }\n   "],[0,"                "]],"start1":3437,"start2":3437,"length1":34,"length2":41},{"diffs":[[0,"                "],[1," "],[0,"return me.valid "]],"start1":3470,"start2":3470,"length1":32,"length2":33},{"diffs":[[0,"                "],[-1,"},\n"],[1,"    },\n   "],[0,"                "]],"start1":3545,"start2":3545,"length1":35,"length2":42},{"diffs":[[0,"        "],[1," "],[0,"onContai"]],"start1":3583,"start2":3583,"length1":16,"length2":17},{"diffs":[[0,"dd, e, data)"],[1," "],[0,"{\n          "]],"start1":3618,"start2":3618,"length1":24,"length2":25},{"diffs":[[0,"                "],[1,"  "],[1,"  "],[0,"var me = this;\n "]],"start1":3641,"start2":3641,"length1":32,"length2":36},{"diffs":[[0,"                "],[1," "],[1,"   "],[0,"// invalid drop "]],"start1":3684,"start2":3684,"length1":32,"length2":36},{"diffs":[[0,"lid drop target\n"],[1,"    "],[0,"                "]],"start1":3711,"start2":3711,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"    "],[0,"return me.dropNo"]],"start1":3781,"start2":3781,"length1":32,"length2":36},{"diffs":[[0,"dropNotAllowed;\n"],[1,"    "],[0,"                "]],"start1":3811,"start2":3811,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"    "],[0,"});\n            "]],"start1":3853,"start2":3853,"length1":32,"length2":36},{"diffs":[[0,"});\n            "],[-1,"},\n"],[1,"    },\n    "],[0,"            drop"]],"start1":3873,"start2":3873,"length1":35,"length2":43},{"diffs":[[0,"ropPosition)"],[1," "],[0,"{\n          "]],"start1":3949,"start2":3949,"length1":24,"length2":25},{"diffs":[[0,"            "],[1,"  "],[1,"  "],[0,"var sqlTable"]],"start1":3968,"start2":3968,"length1":24,"length2":28},{"diffs":[[0,"on = '',"],[1,"\n                       "],[0," dropTab"]],"start1":4059,"start2":4059,"length1":16,"length2":40},{"diffs":[[0,"        "],[1,"   "],[1," "],[0,"showJoin"]],"start1":4125,"start2":4125,"length1":16,"length2":20},{"diffs":[[0,"ent, el)"],[1," "],[0,"{\n      "]],"start1":4161,"start2":4161,"length1":16,"length2":17},{"diffs":[[0,"            "],[1,"  "],[1,"  "],[0,"var cm;\n    "]],"start1":4180,"start2":4180,"length1":24,"length2":28},{"diffs":[[0,"            "],[1,"  "],[1,"  "],[0,"// stop the "]],"start1":4212,"start2":4212,"length1":24,"length2":28},{"diffs":[[0,"        "],[1,"    "],[0,"event.st"]],"start1":4276,"start2":4276,"length1":16,"length2":20},{"diffs":[[0,"                "],[1," "],[1,"   "],[0,"// create contex"]],"start1":4311,"start2":4311,"length1":32,"length2":36},{"diffs":[[0,"xt menu\n"],[1,"    "],[0,"        "]],"start1":4346,"start2":4346,"length1":16,"length2":20},{"diffs":[[0,"        "],[1,"    "],[0,"items: ["]],"start1":4429,"start2":4429,"length1":16,"length2":20},{"diffs":[[0,"  items: [{\n"],[1,"    "],[0,"            "]],"start1":4439,"start2":4439,"length1":24,"length2":28},{"diffs":[[0,"                "],[1,"    "],[0,"icon: 'resources"]],"start1":4514,"start2":4514,"length1":32,"length2":36},{"diffs":[[0,"16x16.gif',\n"],[1,"    "],[0,"            "]],"start1":4571,"start2":4571,"length1":24,"length2":28},{"diffs":[[0,".bind(function()"],[1," "],[0,"{\n\n"],[1,"    "],[0,"                "]],"start1":4636,"start2":4636,"length1":35,"length2":40},{"diffs":[[0,"                "],[1,"  "],[1,"  "],[0,"}, {\n"],[1,"    "],[0,"                "]],"start1":4705,"start2":4705,"length1":37,"length2":45},{"diffs":[[0,"                "],[1,"  "],[1,"  "],[0,"icon: 'resources"]],"start1":4795,"start2":4795,"length1":32,"length2":36},{"diffs":[[0,"emove.gif',\n"],[1,"    "],[0,"            "]],"start1":4840,"start2":4840,"length1":24,"length2":28},{"diffs":[[0,"nction()"],[1," "],[0,"{\n      "]],"start1":4913,"start2":4913,"length1":16,"length2":17},{"diffs":[[0,"                "],[1,"    "],[0,"// remove any co"]],"start1":4940,"start2":4940,"length1":32,"length2":36},{"diffs":[[0,"ections\n"],[1,"    "],[0,"        "]],"start1":5038,"start2":5038,"length1":16,"length2":20},{"diffs":[[0,"nection)"],[1," "],[0,"{\n"],[1,"    "],[0,"        "]],"start1":5168,"start2":5168,"length1":18,"length2":23},{"diffs":[[0,"            "],[1,"  "],[1,"  "],[0,"if (this.uui"]],"start1":5263,"start2":5263,"length1":24,"length2":28},{"diffs":[[0,"            "],[1,"    "],[0,"this.line.re"]],"start1":5343,"start2":5343,"length1":24,"length2":28},{"diffs":[[0,"            "],[1,"  "],[1,"  "],[0,"this.bgLine."]],"start1":5407,"start2":5407,"length1":24,"length2":28},{"diffs":[[0,"gLine.remove();\n"],[1,"    "],[0,"                "]],"start1":5429,"start2":5429,"length1":32,"length2":36},{"diffs":[[0,"                "],[1," "],[1,"   "],[0,"this.miniLine2.r"]],"start1":5538,"start2":5538,"length1":32,"length2":36},{"diffs":[[0,"Line2.remove();\n"],[1,"    "],[0,"                "]],"start1":5567,"start2":5567,"length1":32,"length2":36},{"diffs":[[0,"                "],[-1,"}\n"],[1,"    }\n    "],[0,"                "]],"start1":5664,"start2":5664,"length1":34,"length2":42},{"diffs":[[0,"                "],[1,"    "],[0,"}, this);\n      "]],"start1":5758,"start2":5758,"length1":32,"length2":36},{"diffs":[[0,"  }, this);\n"],[1,"    "],[0,"            "]],"start1":5776,"start2":5776,"length1":24,"length2":28},{"diffs":[[0,"                "],[1,"    "],[0,"}, this)\n       "]],"start1":5888,"start2":5888,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"  "],[1,"  "],[0,"}, {\n"],[1,"    "],[0,"                "]],"start1":5925,"start2":5925,"length1":37,"length2":45},{"diffs":[[0," Menu',\n"],[1,"    "],[0,"        "]],"start1":5994,"start2":5994,"length1":16,"length2":20},{"diffs":[[0,"                "],[1,"    "],[0,"handler: Ext.emp"]],"start1":6082,"start2":6082,"length1":32,"length2":36},{"diffs":[[0,"    "],[1," "],[-1,"}]\n"],[1,"   }]\n    "],[0,"    "]],"start1":6143,"start2":6143,"length1":11,"length2":19},{"diffs":[[0,"            });\n"],[1,"    "],[0,"                "]],"start1":6166,"start2":6166,"length1":32,"length2":36},{"diffs":[[0,"se position\n"],[1,"    "],[0,"            "]],"start1":6249,"start2":6249,"length1":24,"length2":28},{"diffs":[[0,"    "],[-1,"};\n\n"],[1,"    };\n\n    "],[0,"    "]],"start1":6323,"start2":6323,"length1":12,"length2":20},{"diffs":[[0,"                "],[1,"    "],[0,"sqlTable1 = data"]],"start1":6381,"start2":6381,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"   "],[1," "],[0,"sqlTable1.shadow"]],"start1":6441,"start2":6441,"length1":32,"length2":36},{"diffs":[[0,"ctions = true;\n\n"],[1,"    "],[0,"                "]],"start1":6490,"start2":6490,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"   "],[1," "],[0,"sqlTable2.shadow"]],"start1":6587,"start2":6587,"length1":32,"length2":36},{"diffs":[[0,"ctions = true;\n\n"],[1,"    "],[0,"                "]],"start1":6636,"start2":6636,"length1":32,"length2":36},{"diffs":[[0,"        "],[1,"  "],[1,"  "],[0,"targetTa"]],"start1":6758,"start2":6758,"length1":16,"length2":20},{"diffs":[[0,"        "],[1,"    "],[0,"aBBPos ="]],"start1":6855,"start2":6855,"length1":16,"length2":20},{"diffs":[[0,"                "],[1,"  "],[1,"  "],[0,"connection = sql"]],"start1":6920,"start2":6920,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"    "],[0,"sqlTable1.connec"]],"start1":7044,"start2":7044,"length1":32,"length2":36},{"diffs":[[0,"                "],[1," "],[1,"   "],[0,"sqlTable2.connec"]],"start1":7117,"start2":7117,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"    "],[0,"oj.sql.builder.c"]],"start1":7191,"start2":7191,"length1":32,"length2":36},{"diffs":[[0,"        "],[1," "],[1,"   "],[0,"// bgLin"]],"start1":7269,"start2":7269,"length1":16,"length2":20},{"diffs":[[0,"h is 10\n"],[1,"    "],[0,"        "]],"start1":7329,"start2":7329,"length1":16,"length2":20},{"diffs":[[0,"                "],[1,"    "],[0,"connection.bgLin"]],"start1":7414,"start2":7414,"length1":32,"length2":36},{"diffs":[[0,", connection);\n\n"],[1,"    "],[0,"                "]],"start1":7483,"start2":7483,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"    "],[0,"connection.line."]],"start1":7570,"start2":7570,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"   "],[1," "],[0,"// create an ins"]],"start1":7657,"start2":7657,"length1":32,"length2":36},{"diffs":[[0,"n model\n"],[1,"    "],[0,"        "]],"start1":7709,"start2":7709,"length1":16,"length2":20},{"diffs":[[0,"            "],[1,"  "],[1,"  "],[0,"// set join "]],"start1":7797,"start2":7797,"length1":24,"length2":28},{"diffs":[[0,"join id\n"],[1,"    "],[0,"        "]],"start1":7820,"start2":7820,"length1":16,"length2":20},{"diffs":[[0,"                "],[1," "],[1,"   "],[0,"// sqlTable1 is "]],"start1":7889,"start2":7889,"length1":32,"length2":36},{"diffs":[[0," the left table\n"],[1,"    "],[0,"                "]],"start1":7924,"start2":7924,"length1":32,"length2":36},{"diffs":[[0,"        "],[1," "],[1,"   "],[0,"// data."]],"start1":8020,"start2":8020,"length1":16,"length2":20},{"diffs":[[0,"ragged node\n"],[1,"    "],[0,"            "]],"start1":8080,"start2":8080,"length1":24,"length2":28},{"diffs":[[0,"                "],[1,"    "],[0,"// sqlTable1 is "]],"start1":8178,"start2":8178,"length1":32,"length2":36},{"diffs":[[0," the left table\n"],[1,"    "],[0,"                "]],"start1":8213,"start2":8213,"length1":32,"length2":36},{"diffs":[[0,"        "],[1,"    "],[0,"// node."]],"start1":8310,"start2":8310,"length1":16,"length2":20},{"diffs":[[0,"                "],[1,"   "],[1," "],[0,"join.set('rightT"]],"start1":8376,"start2":8376,"length1":32,"length2":36},{"diffs":[[0,"            "],[1,"    "],[0,"// set the d"]],"start1":8498,"start2":8498,"length1":24,"length2":28},{"diffs":[[0,"                "],[1,"   "],[1," "],[0,"join.set('joinTy"]],"start1":8555,"start2":8555,"length1":32,"length2":36},{"diffs":[[0," 'INNER');\n\n"],[1,"    "],[0,"            "]],"start1":8595,"start2":8595,"length1":24,"length2":28},{"diffs":[[0,"                "],[1,"  "],[1,"  "],[0,"joinCondition = "]],"start1":8680,"start2":8680,"length1":32,"length2":36},{"diffs":[[0,"                "],[-1,"}\n"],[1,"    }\n    "],[0,"                "]],"start1":8806,"start2":8806,"length1":34,"length2":42},{"diffs":[[0,"         else {\n"],[1,"    "],[0,"                "]],"start1":8843,"start2":8843,"length1":32,"length2":36},{"diffs":[[0,"                "],[-1,"}\n\n"],[1,"    }\n\n    "],[0,"                "]],"start1":8992,"start2":8992,"length1":35,"length2":43},{"diffs":[[0,"lias') != '') {\n"],[1,"    "],[0,"                "]],"start1":9066,"start2":9066,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"   "],[1," "],[0,"}\n"],[1,"    "],[0,"                "]],"start1":9213,"start2":9213,"length1":34,"length2":42},{"diffs":[[0,"         else {\n"],[1,"    "],[0,"                "]],"start1":9250,"start2":9250,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"    "],[0,"}\n\n             "]],"start1":9396,"start2":9396,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"  "],[1,"  "],[0,"join.set('joinCo"]],"start1":9423,"start2":9423,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"    "],[0,"oj.sql.builder.s"]],"start1":9489,"start2":9489,"length1":32,"length2":36},{"diffs":[[0,"Join(join);\n"],[1,"                    }\n\n"],[0,"            "]],"start1":9537,"start2":9537,"length1":24,"length2":47},{"diffs":[[0,"              }\n"],[-1,"\n"],[0,"            }\n  "]],"start1":9574,"start2":9574,"length1":33,"length2":32},{"diffs":[[0,"   }"],[1,","],[0,"\n    "],[-1,"},\n"],[0,"    "]],"start1":9609,"start2":9609,"length1":16,"length2":14},{"diffs":[[0,"nction()"],[1," "],[0,"{\n\n     "]],"start1":9640,"start2":9640,"length1":16,"length2":17},{"diffs":[[0," {\n\n        "],[1," "],[1,"   "],[0,"this.columns"]],"start1":9648,"start2":9648,"length1":24,"length2":28},{"diffs":[[0," [{\n            "],[1,"  "],[1,"  "],[0,"xtype: 'gridcolu"]],"start1":9678,"start2":9678,"length1":32,"length2":36},{"diffs":[[0,"        "],[1,"    "],[0,"width: 1"]],"start1":9723,"start2":9723,"length1":16,"length2":20},{"diffs":[[0,"th: 16,\n"],[1,"    "],[0,"        "]],"start1":9738,"start2":9738,"length1":16,"length2":20},{"diffs":[[0,"y',\n            "],[1,"    "],[0,"renderer: functi"]],"start1":9776,"start2":9776,"length1":32,"length2":36},{"diffs":[[0,"al, meta, model)"],[1," "],[0,"{\n              "]],"start1":9816,"start2":9816,"length1":32,"length2":33},{"diffs":[[0,"            "],[1,"  "],[1,"  "],[0,"if (val == '"]],"start1":9839,"start2":9839,"length1":24,"length2":28},{"diffs":[[0,"val == 'PRI') {\n"],[1,"    "],[0,"                "]],"start1":9859,"start2":9859,"length1":32,"length2":36},{"diffs":[[0,"                "],[-1,"}\n"],[1,"    }\n    "],[0,"                "]],"start1":10030,"start2":10030,"length1":34,"length2":42},{"diffs":[[0,";';\n            "],[-1,"}\n"],[1,"    }\n    "],[0,"        }, {\n   "]],"start1":10085,"start2":10085,"length1":34,"length2":42},{"diffs":[[0,", {\n            "],[1,"   "],[1," "],[0,"xtype: 'gridcolu"]],"start1":10120,"start2":10120,"length1":32,"length2":36},{"diffs":[[0,": 'gridcolumn',\n"],[1,"    "],[0,"            flex"]],"start1":10145,"start2":10145,"length1":32,"length2":36},{"diffs":[[0," 1,\n            "],[1,"    "],[0,"dataIndex: 'fiel"]],"start1":10182,"start2":10182,"length1":32,"length2":36},{"diffs":[[0,"d',\n            "],[1," "],[1,"   "],[0,"renderer: functi"]],"start1":10218,"start2":10218,"length1":32,"length2":36},{"diffs":[[0,", model)"],[1," "],[0,"{\n      "]],"start1":10266,"start2":10266,"length1":16,"length2":17},{"diffs":[[0,"            "],[1,"  "],[1,"  "],[0,"if (model.ge"]],"start1":10281,"start2":10281,"length1":24,"length2":28},{"diffs":[[0,"y') == 'PRI') {\n"],[1,"    "],[0,"                "]],"start1":10314,"start2":10314,"length1":32,"length2":36},{"diffs":[[0,"                "],[-1,"}\n"],[1,"    }\n    "],[0,"                "]],"start1":10486,"start2":10486,"length1":34,"length2":42},{"diffs":[[0,"';\n\n            "],[-1,"}\n"],[1,"    }\n    "],[0,"        }];\n\n   "]],"start1":10612,"start2":10612,"length1":34,"length2":42},{"diffs":[[0,"];\n\n        "],[1,"   "],[1," "],[0,"this.selMode"]],"start1":10647,"start2":10647,"length1":24,"length2":28},{"diffs":[[0,"        "],[1,"    "],[0,"mode: 'S"]],"start1":10727,"start2":10727,"length1":16,"length2":20},{"diffs":[[0,"IMPLE',\n"],[1,"    "],[0,"        "]],"start1":10747,"start2":10747,"length1":16,"length2":20},{"diffs":[[0,"ue,\n            "],[1," "],[1,"   "],[0,"listeners: {\n   "]],"start1":10784,"start2":10784,"length1":32,"length2":36},{"diffs":[[0,"   listeners: {\n"],[1,"    "],[0,"                "]],"start1":10801,"start2":10801,"length1":32,"length2":36},{"diffs":[[0,"(selModel, data)"],[1," "],[0,"{\n              "]],"start1":10853,"start2":10853,"length1":32,"length2":33},{"diffs":[[0,"        "],[1,"  "],[1,"  "],[0,"// add n"]],"start1":10884,"start2":10884,"length1":16,"length2":20},{"diffs":[[0,"                "],[1,"    "],[0,"oj.sql.builder.s"]],"start1":10962,"start2":10962,"length1":32,"length2":36},{"diffs":[[0," true);\n"],[1,"    "],[0,"        "]],"start1":11027,"start2":11027,"length1":16,"length2":20},{"diffs":[[0,"        "],[1,"    "],[0,"deselect"]],"start1":11066,"start2":11066,"length1":16,"length2":20},{"diffs":[[0,"l, data)"],[1," "],[0,"{\n      "]],"start1":11104,"start2":11104,"length1":16,"length2":17},{"diffs":[[0,"            "],[1," "],[1,"   "],[0,"var store, m"]],"start1":11123,"start2":11123,"length1":24,"length2":28},{"diffs":[[0,"                "],[1,"  "],[1,"  "],[0,"// remove row fr"]],"start1":11161,"start2":11161,"length1":32,"length2":36},{"diffs":[[0,"deselection\n"],[1,"    "],[0,"            "]],"start1":11220,"start2":11220,"length1":24,"length2":28},{"diffs":[[0,"get('id'));\n"],[1,"    "],[0,"            "]],"start1":11302,"start2":11302,"length1":24,"length2":28},{"diffs":[[0,"    "],[-1,"}\n"],[1,"    }\n  "],[0,"        "],[1,"  "],[0,"});\n\n"],[1,"    "],[0,"    "]],"start1":11344,"start2":11344,"length1":23,"length2":35},{"diffs":[[0,"s);\n    "],[-1,"}\n"],[1,"    }\n    "],[0,"});\n\n}()"]],"start1":11407,"start2":11407,"length1":18,"length2":26}]],"length":11435,"saved":false}
