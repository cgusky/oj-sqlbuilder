{"ts":1368653463812,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1368653547642,"patch":[[{"diffs":[[1,"/* jshint undef: true, unused: true */\r\n/* global Csw2:true, window:true, Ext:true, $: true */\r\n\r\n(function _gridColumnIIFE(){\r\n\r\n    /**\r\n     * Private renderer column class constructor. \r\n     * @param dataIndex {String} Column id\r\n     * @param width {Number} [width] Absolute width of the column\r\n     * @param flex {Number} [flex] Relative width of the column\r\n     * @param onRender {Function} Render method for the column\r\n    */\r\n    var RendererColumn = function (dataIndex, width, flex, onRender) {\r\n        var that = Csw2.grids.columns.column({\r\n                xtype: Csw2.constants.xtypes.gridcolumn,\r\n                dataIndex: dataIndex\r\n                //text: dataIndex\r\n        });\r\n        Csw2.property(that, 'renderer', onRender);\r\n        if (width && width > 0) {\r\n            Csw2.property(that, 'width', width);\r\n        } else {\r\n            if (flex && flex > 0) {\r\n                Csw2.property(that, 'flex', flex);\r\n            }\r\n        }\r\n\r\n        return that;\r\n    };\r\n\r\n    Csw2.instanceof.lift('RendererColumn', RendererColumn);\r\n\r\n    /**\r\n     * Create a grid column\r\n     * @param colDef {Object} Definition of the renderer column\r\n    */\r\n    Csw2.grids.columns.lift('rendererColumn', function (colDef){\r\n        if (!colDef || arguments.length === 0) {\r\n            throw new Error('Cannot create a column without parameters');\r\n        }\r\n        if (!colDef.onRender) {\r\n            throw new Error('Cannot create a render column without a render method.');\r\n        }\r\n\r\n        var ret = new RendererColumn(colDef.dataIndex, colDef.width, colDef.flex, colDef.onRender);\r\n        \r\n        return ret;\r\n    });\r\n\r\n\r\n    }());"]],"start1":0,"start2":0,"length1":0,"length2":1671}]],"length":1671,"saved":false}
{"ts":1368653548659,"patch":[[{"diffs":[[0,"tructor."],[-1," "],[0,"\r\n     *"]],"start1":180,"start2":180,"length1":17,"length2":16},{"diffs":[[0,"nder);\r\n"],[-1,"        "],[0,"\r\n      "]],"start1":1609,"start2":1609,"length1":24,"length2":16}]],"length":1662,"saved":false}
{"ts":1368653555018,"patch":[[{"diffs":[[0," global "],[-1,"Csw2"],[1,"OJ"],[0,":true, w"]],"start1":42,"start2":42,"length1":20,"length2":18},{"diffs":[[0," that = "],[-1,"Csw2"],[1,"OJ"],[0,".grids.c"]],"start1":519,"start2":519,"length1":20,"length2":18},{"diffs":[[0," xtype: "],[-1,"Csw2"],[1,"OJ"],[0,".constan"]],"start1":569,"start2":569,"length1":20,"length2":18},{"diffs":[[0,"   });\r\n        "],[-1,"Csw2"],[1,"OJ"],[0,".property(that, "]],"start1":688,"start2":688,"length1":36,"length2":34},{"diffs":[[0," {\r\n            "],[-1,"Csw2"],[1,"OJ"],[0,".property(that, "]],"start1":777,"start2":777,"length1":36,"length2":34},{"diffs":[[0,"        "],[-1,"Csw2"],[1,"OJ"],[0,".propert"]],"start1":892,"start2":892,"length1":20,"length2":18},{"diffs":[[0,"\r\n\r\n    "],[-1,"Csw2"],[1,"OJ"],[0,".instanc"]],"start1":990,"start2":990,"length1":20,"length2":18},{"diffs":[[0,"    "],[-1,"Csw2"],[1,"OJ"],[0,".gri"]],"start1":1166,"start2":1166,"length1":12,"length2":10}]],"length":1646,"saved":false}
